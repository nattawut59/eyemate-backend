// app.js - Complete Application Server
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const path = require('path');
const fs = require('fs').promises;

// Import modules
const { testDbConnection } = require('./config/database');
const authRoutes = require('./routes/auth');
const patientRoutes = require('./routes/patient');
const medicationRoutes = require('./routes/medication');
const patientExtendedRoutes = require('./routes/patient-extended');
const notificationRoutes = require('./routes/notifications');

// Import services
const { startAppointmentScheduler } = require('./services/appointmentScheduler');

const app = express();
const PORT = process.env.PORT || 5001;

// Security middleware
app.use(helmet({
    contentSecurityPolicy: false // Allow for flexibility during development
}));

// CORS Configuration
app.use(cors({
    origin: true,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Middleware
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// Rate limiting
const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100,
    message: { error: 'Too many requests, please try again later.' }
});

app.use('/api', apiLimiter);

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/patient', patientRoutes);
app.use('/api/patient', patientExtendedRoutes);
app.use('/api/patient/medications', medicationRoutes);
app.use('/api/notifications', notificationRoutes);

// Health Check
app.get('/api/health', async (req, res) => {
    const dbStatus = await testDbConnection();
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        database: dbStatus ? 'Connected' : 'Disconnected',
        service: 'EyeMate Glaucoma Management System',
        version: '2.0.0',
        uptime: Math.floor(process.uptime()),
        memory: process.memoryUsage()
    });
});

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        message: 'EyeMate Backend API is running!',
        version: '2.0.0',
        status: 'OK',
        database: 'EyeMateDB (TiDB Cloud)',
        endpoints: {
            auth: '/api/auth',
            patient: '/api/patient',
            medications: '/api/patient/medications',
            notifications: '/api/notifications',
            health: '/api/health'
        }
    });
});

// Test endpoints for verification
app.get('/api/test/db', async (req, res) => {
    try {
        const { pool } = require('./config/database');
        
        // Test basic query
        const [users] = await pool.execute('SELECT COUNT(*) as user_count FROM Users');
        const [patients] = await pool.execute('SELECT COUNT(*) as patient_count FROM Patients');
        const [appointments] = await pool.execute('SELECT COUNT(*) as appointment_count FROM Appointments');
        
        res.json({
            message: 'Database connection successful',
            tables: {
                users: users[0].user_count,
                patients: patients[0].patient_count,
                appointments: appointments[0].appointment_count
            },
            database: 'EyeMateDB',
            status: 'Connected'
        });
    } catch (error) {
        console.error('Database test error:', error);
        res.status(500).json({
            message: 'Database connection failed',
            error: error.message,
            status: 'Error'
        });
    }
});

// Test patient data endpoint
app.get('/api/test/patient-data', async (req, res) => {
    try {
        const { pool } = require('./config/database');
        
        // Sample queries to test different tables
        const [iopRecords] = await pool.execute('SELECT COUNT(*) as count FROM IOP_Records');
        const [medications] = await pool.execute('SELECT COUNT(*) as count FROM Medications');
        const [notifications] = await pool.execute('SELECT COUNT(*) as count FROM Notifications');
        
        res.json({
            message: 'Patient data tables accessible',
            tables: {
                iop_records: iopRecords[0].count,
                medications: medications[0].count,
                notifications: notifications[0].count
            },
            status: 'OK'
        });
    } catch (error) {
        console.error('Patient data test error:', error);
        res.status(500).json({
            message: 'Error accessing patient data',
            error: error.message
        });
    }
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({
        message: 'Endpoint not found',
        code: 'NOT_FOUND',
        available_endpoints: [
            'GET /',
            'GET /api/health',
            'POST /api/auth/register',
            'POST /api/auth/login',
            'GET /api/patient/profile',
            'GET /api/patient/dashboard',
            'POST /api/patient/iop-measurement',
            'GET /api/patient/medications',
            'POST /api/notifications/subscribe'
        ]
    });
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('Global error handler:', error);
    res.status(500).json({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö',
        code: 'INTERNAL_ERROR',
        timestamp: new Date().toISOString()
    });
});

// Start server
const startServer = async () => {
    try {
        // Create upload directory if it doesn't exist
        const uploadsPath = path.join(__dirname, 'uploads', 'medical-docs');
        try {
            await fs.mkdir(uploadsPath, { recursive: true });
            console.log('‚úÖ Upload directory ready');
        } catch (dirError) {
            if (dirError.code !== 'EEXIST') {
                console.error('‚ùå Failed to create upload directory:', dirError);
            }
        }

        // Test database connection
        const dbConnected = await testDbConnection();
        if (!dbConnected) {
            console.error('‚ùå Cannot start server: Database connection failed');
            console.error('Please check your TiDB Cloud connection settings');
            process.exit(1);
        }

        // Start appointment scheduler service
        startAppointmentScheduler();

        app.listen(PORT, () => {
            console.log('üöÄ EyeMate Glaucoma Management System Started!');
            console.log(`üì° Server running on http://localhost:${PORT}`);
            console.log(`üîó API Base URL: http://localhost:${PORT}/api`);
            console.log(`üè• Database: EyeMateDB (TiDB Cloud)`);
            console.log('');
            console.log('üìã Available Endpoints:');
            console.log('üîê Authentication:');
            console.log('   POST /api/auth/register    - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà');
            console.log('   POST /api/auth/login       - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
            console.log('   POST /api/auth/logout      - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö');
            console.log('   POST /api/auth/refresh     - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô');
            console.log('   GET  /api/auth/me          - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
            console.log('');
            console.log('üë§ Patient Profile & Settings:');
            console.log('   GET  /api/patient/profile     - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß');
            console.log('   PUT  /api/patient/profile     - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß');
            console.log('   GET  /api/patient/dashboard   - ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î');
            console.log('   GET  /api/patient/settings    - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
            console.log('   PUT  /api/patient/settings    - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
            console.log('');
            console.log('üëÅÔ∏è  IOP Management:');
            console.log('   POST /api/patient/iop-measurement  - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏≤');
            console.log('   GET  /api/patient/iop-measurements - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏≤');
            console.log('   GET  /api/patient/iop-analytics    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏≤');
            console.log('');
            console.log('üíä Medication Management:');
            console.log('   GET  /api/patient/medications          - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤');
            console.log('   GET  /api/patient/medications/reminders - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≤');
            console.log('   POST /api/patient/medications/reminders - ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≤');
            console.log('   POST /api/patient/medications/usage     - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤');
            console.log('   GET  /api/patient/medications/adherence - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤');
            console.log('   GET  /api/patient/medications/usage-history - ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤');
            console.log('');
            console.log('üìÖ Appointments:');
            console.log('   GET  /api/patient/appointments                        - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
            console.log('   POST /api/patient/appointment-reschedule-request     - ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î');
            console.log('   GET  /api/patient/reschedule-requests                - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏î');
            console.log('');
            console.log('üìã Medical History & Records:');
            console.log('   POST /api/patient/family-history         - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß');
            console.log('   GET  /api/patient/family-history         - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß');
            console.log('   POST /api/patient/eye-injury             - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏≤‡∏á‡∏ï‡∏≤');
            console.log('   POST /api/patient/symptom-report         - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥');
            console.log('');
            console.log('üî¨ Test Results & Special Tests:');
            console.log('   GET  /api/patient/visual-field-tests     - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏ô‡∏™‡∏≤‡∏¢‡∏ï‡∏≤');
            console.log('   GET  /api/patient/visual-field-comparison - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à');
            console.log('   GET  /api/patient/special-tests          - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏¥‡πÄ‡∏®‡∏©');
            console.log('   GET  /api/patient/oct-results            - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à OCT');
            console.log('');
            console.log('üìÑ Medical Documents:');
            console.log('   POST /api/patient/documents              - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
            console.log('   GET  /api/patient/documents              - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
            console.log('   GET  /api/patient/documents/:id/download - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
            console.log('');
            console.log('üìû Help & Support:');
            console.log('   GET  /api/patient/help                   - ‡∏î‡∏π‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠');
            console.log('');
            console.log('üîî Notifications & Push:');
            console.log('   GET  /api/patient/notifications                - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
            console.log('   PUT  /api/patient/notifications/:id/read      - ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
            console.log('   POST /api/notifications/subscribe             - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö Push Notification');
            console.log('   POST /api/notifications/unsubscribe           - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Push Notification');
            console.log('   GET  /api/notifications/status                - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
            console.log('   GET  /api/notifications/vapid-public-key      - VAPID Public Key');
            console.log('');
            console.log('üß™ Test Endpoints:');
            console.log('   GET  /api/test/db           - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            console.log('   GET  /api/test/patient-data - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢');
            console.log('   GET  /api/health            - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö');
            console.log('');
            console.log(`‚è∞ ${new Date().toLocaleString('th-TH')}`);
            console.log('');
            console.log('üîÑ Automated Features:');
            console.log('   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ');
            console.log('   - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≤‡πÅ‡∏ö‡∏ö Real-time ‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ');
            console.log('   - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
            console.log('   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á');
            console.log('   - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ß‡∏±‡∏ô, 1 ‡∏ß‡∏±‡∏ô, ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
            console.log('   - Push Notification ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå');
            console.log('   - ‡∏£‡∏∞‡∏ö‡∏ö audit logging');
            console.log('   - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ session ‡πÅ‡∏•‡∏∞ token ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
            console.log('');
            console.log('‚úÖ Ready to serve patients!');
        });
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
};

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üõë SIGTERM received, shutting down gracefully...');
    const { pool } = require('./config/database');
    await pool.end();
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('üõë SIGINT received, shutting down gracefully...');
    const { pool } = require('./config/database');
    await pool.end();
    process.exit(0);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

// Export for testing
module.exports = app;

startServer();